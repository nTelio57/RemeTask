// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RemeTask.Data;

namespace RemeTask.Migrations
{
    [DbContext(typeof(RemetaskContext))]
    [Migration("20210923205809_Database-seeding")]
    partial class Databaseseeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RemeTask.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("TaskGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskGroupId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deadline = new DateTime(2021, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Labai didelis aprasymas",
                            IsCompleted = false,
                            Priority = 3,
                            TaskGroupId = 2,
                            Title = "Laboras1"
                        },
                        new
                        {
                            Id = 2,
                            CompletionDate = new DateTime(2021, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Labai didelis aprasymas",
                            IsCompleted = true,
                            Priority = 2,
                            TaskGroupId = 1,
                            Title = "Laboras2"
                        },
                        new
                        {
                            Id = 3,
                            Deadline = new DateTime(2021, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Labai didelis aprasymas",
                            IsCompleted = false,
                            Priority = 3,
                            TaskGroupId = 1,
                            Title = "Kontras"
                        },
                        new
                        {
                            Id = 4,
                            Deadline = new DateTime(2021, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Labai didelis aprasymas",
                            IsCompleted = false,
                            Priority = 3,
                            TaskGroupId = 2,
                            Title = "Pakartotinis lab1"
                        },
                        new
                        {
                            Id = 5,
                            CompletionDate = new DateTime(2021, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Labai didelis aprasymas",
                            IsCompleted = true,
                            Priority = 1,
                            TaskGroupId = 4,
                            Title = "Tarpinis egzas"
                        },
                        new
                        {
                            Id = 6,
                            Deadline = new DateTime(2021, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Labai didelis aprasymas",
                            IsCompleted = false,
                            Priority = 5,
                            TaskGroupId = 2,
                            Title = "Lab3"
                        },
                        new
                        {
                            Id = 7,
                            Deadline = new DateTime(2021, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Labai didelis aprasymas",
                            IsCompleted = false,
                            Priority = 2,
                            TaskGroupId = 4,
                            Title = "Testas1"
                        },
                        new
                        {
                            Id = 8,
                            Deadline = new DateTime(2021, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Labai didelis aprasymas",
                            IsCompleted = false,
                            Priority = 3,
                            TaskGroupId = 1,
                            Title = "Anglu egzas"
                        },
                        new
                        {
                            Id = 9,
                            CompletionDate = new DateTime(2021, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Labai didelis aprasymas",
                            IsCompleted = true,
                            Priority = 4,
                            TaskGroupId = 4,
                            Title = "Lab6"
                        },
                        new
                        {
                            Id = 10,
                            Deadline = new DateTime(2021, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Labai didelis aprasymas",
                            IsCompleted = false,
                            Priority = 1,
                            TaskGroupId = 2,
                            Title = "Pakartotinis egzas"
                        });
                });

            modelBuilder.Entity("RemeTask.Models.TaskGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Matematika",
                            Tag = "MAT",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Informatika",
                            Tag = "INFO",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Anglu",
                            Tag = "ENG",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fizika",
                            Tag = "FIZ",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Objektinis programavimas",
                            Tag = "OOP",
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("RemeTask.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Team1",
                            OwnerId = 1
                        });
                });

            modelBuilder.Entity("RemeTask.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "vienas@test.com",
                            Password = "r08fhHamhLI9qMfjLWZqMduOPvKfIJhCmmxIy53RMUI=",
                            Salt = "/CAuKyuKhVVR5B6oLjfQwAzC9eJIhju0xubUPMPiyWQ="
                        },
                        new
                        {
                            Id = 2,
                            Email = "du@test.com",
                            Password = "G9Jr7PFw0PecDsLlJhCM2LyxzWtKD40a/GmzAOqn77Y=",
                            Salt = "p7JlJExiWZo/cR1sHBm2j1DPsTE8MXO3NAEWya9/Alo="
                        },
                        new
                        {
                            Id = 3,
                            Email = "vitrysenas@test.com",
                            Password = "s+PMYaajIcGUnVFcGWaRIRxV3nPUGL4i4aa2MWN2Gdc=",
                            Salt = "qf9CdzHJz2V323ul6v/qbg87Enbqa84RyRcQhHpV4/A="
                        });
                });

            modelBuilder.Entity("RemeTask.Models.UserTeam", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeams");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            TeamId = 1
                        },
                        new
                        {
                            UserId = 2,
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("RemeTask.Models.Task", b =>
                {
                    b.HasOne("RemeTask.Models.TaskGroup", "TaskGroup")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskGroup");
                });

            modelBuilder.Entity("RemeTask.Models.TaskGroup", b =>
                {
                    b.HasOne("RemeTask.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("RemeTask.Models.User", "User")
                        .WithMany("TaskGroups")
                        .HasForeignKey("UserId");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemeTask.Models.Team", b =>
                {
                    b.HasOne("RemeTask.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RemeTask.Models.UserTeam", b =>
                {
                    b.HasOne("RemeTask.Models.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemeTask.Models.User", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemeTask.Models.TaskGroup", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("RemeTask.Models.Team", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RemeTask.Models.User", b =>
                {
                    b.Navigation("TaskGroups");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
